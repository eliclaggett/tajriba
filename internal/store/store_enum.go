// Code generated by go-enum DO NOT EDIT.

package store

import (
	"fmt"
	"strings"
)

const (
	// Scope is a Kind of type Scope.
	Scope Kind = iota
	// Step is a Kind of type Step.
	Step
	// Attribute is a Kind of type Attribute.
	Attribute
	// Participant is a Kind of type Participant.
	Participant
	// User is a Kind of type User.
	User
	// Link is a Kind of type Link.
	Link
	// Transition is a Kind of type Transition.
	Transition
	// Service is a Kind of type Service.
	Service
	// Session is a Kind of type Session.
	Session
	// Group is a Kind of type Group.
	Group
)

const _KindName = "ScopeStepAttributeParticipantUserLinkTransitionServiceSessionGroup"

var _KindNames = []string{
	_KindName[0:5],
	_KindName[5:9],
	_KindName[9:18],
	_KindName[18:29],
	_KindName[29:33],
	_KindName[33:37],
	_KindName[37:47],
	_KindName[47:54],
	_KindName[54:61],
	_KindName[61:66],
}

// KindNames returns a list of possible string values of Kind.
func KindNames() []string {
	tmp := make([]string, len(_KindNames))
	copy(tmp, _KindNames)
	return tmp
}

var _KindMap = map[Kind]string{
	0: _KindName[0:5],
	1: _KindName[5:9],
	2: _KindName[9:18],
	3: _KindName[18:29],
	4: _KindName[29:33],
	5: _KindName[33:37],
	6: _KindName[37:47],
	7: _KindName[47:54],
	8: _KindName[54:61],
	9: _KindName[61:66],
}

// String implements the Stringer interface.
func (x Kind) String() string {
	if str, ok := _KindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Kind(%d)", x)
}

var _KindValue = map[string]Kind{
	_KindName[0:5]:                    0,
	strings.ToLower(_KindName[0:5]):   0,
	_KindName[5:9]:                    1,
	strings.ToLower(_KindName[5:9]):   1,
	_KindName[9:18]:                   2,
	strings.ToLower(_KindName[9:18]):  2,
	_KindName[18:29]:                  3,
	strings.ToLower(_KindName[18:29]): 3,
	_KindName[29:33]:                  4,
	strings.ToLower(_KindName[29:33]): 4,
	_KindName[33:37]:                  5,
	strings.ToLower(_KindName[33:37]): 5,
	_KindName[37:47]:                  6,
	strings.ToLower(_KindName[37:47]): 6,
	_KindName[47:54]:                  7,
	strings.ToLower(_KindName[47:54]): 7,
	_KindName[54:61]:                  8,
	strings.ToLower(_KindName[54:61]): 8,
	_KindName[61:66]:                  9,
	strings.ToLower(_KindName[61:66]): 9,
}

// ParseKind attempts to convert a string to a Kind
func ParseKind(name string) (Kind, error) {
	if x, ok := _KindValue[name]; ok {
		return x, nil
	}
	return Kind(0), fmt.Errorf("%s is not a valid Kind, try [%s]", name, strings.Join(_KindNames, ", "))
}

// MarshalText implements the text marshaller method
func (x Kind) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Kind) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseKind(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
